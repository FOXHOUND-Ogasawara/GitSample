①private Map<Integer, String> menu = new HashMap<Integer, String>();  //Q.問題文でpublic指定されているがなぜprivateなのか？
これについては、このプログラムであればpublicでもprivateでも問題ないですが、
privateの方が良いので問題文の方をSLスタジオ製作チームに連携して修正をします。
失礼しました。

②//private static final BufferedReader BR = new BufferedReader(new InputStreamReader(System.in)); //Q.定数化する理由は？
これについては、通例に近いものがあります。
毎回定義するのも面倒なので、キーボードからの入力はBR、ファイル入力をFRと定数化することはよくあります。
ただ、実務ではJavaプログラムに対して直接キーボード入力することは少ないので良く使われるのはFRの方です。
ここは軽く流してくれて大丈夫です。

③ /*private void showMenu(Map<Integer, String> menu) {   //Q.なぜ引数にMapを指定しなければならないのか？また、引数にMapやclassを入れた場合のデータの挙動が分からないし、なぜここで引数を取るという思考になるのか？
今回やりたいことがメニューの表示なのでmenuを格納しているMapを引数に指定しています。
データの挙動が分からないというのは引数やメソッドの挙動についての理解が浅いのかなと思います。
Executionクラスで実行をしていますが、ここでBank型のインスタンスを生成し、
selectMenuメソッドを呼び出し、その中で、inputMenuを呼び出しそこでまずメニューを表示させますね。
そこでインスタンスを生成した時のメンバフィールドであるmenuを実引数として渡します。
実引数と仮引数の型は一致していないといけないので、Mapで渡してMapで受け取るという仕組みです。
この作りにしている理由としては、初めのフローチャート通りの実装のためです。
処理を開始したら選択肢を表示して入力して、それぞれの処理が終わったらまたメニューを表示してと繰り返すために模範解答ではこの作りになっています。
このshowMenuメソッドをinputMenuから切り出してselectMenuメソッドのwhile文の中に配置する方法もあると思います。
ここでメニュー表示を引数で渡して表示している理由としては拡張性のためです。
例えば、「振り込み」というメニューを追加しようと思った時にべた書きだと修正箇所が増えてしまいバグが発生する確率が上がってしまいます。
ここを引数を渡してという仕組みを作っておけば、フィールドに追加をすればいいだけになります。
今回は、これ以上のことはしないですが実務を想定すると拡張性が高いコードを書くことが大事です。

上記、質問何か所かありますが同様の回答で問題ないかなと思います。

④return input;  //Q.じゃんけんゲームはここでbreak,ATMがここでreturnでinputを返しているのは、フローチャートでその先の処理をswitch文で分岐させると書いてあるから？つまり実際の業務もフローチャートに従ってコードを書いていくということ？でなければ複数人でコードの整合性が取れなくなるよね？
ATM課題については、処理を終了させる箇所は別である（4の時）からです。
なのでフローチャート通りの実装と言えます。
実際の業務ではフローチャートや詳細設計書を元になどコードの源泉となるものは異なります。
仮にこのATMの実装を複数人で分担するのであれば、
１．導入部分（mainで呼び出し～メニュー表示まで、場合によっては分岐させるところまで）
２．～５．各機能の実装（預け入れ、引き出し、残高照会、終了）
とするかなと思います。
複数人で実装する時には、設計書にデータの受け渡し方法など細かに書いてあることが殆どです。
例えば、メニューは数字の1～4で渡してswitch文で分岐させる、みたいに取り決めをしておけば
それぞれの機能の担当者は、数字を受け取った後の処理を書けばいいと理解できます。

⑤while (isFinished) { //Q.ここを単にwhile(true)とせずにtrueを変数で表現するのは、case4のときだけfalseにしてwhile文を抜け、breakでswitch文を抜けるがまだwhile文の繰り返しは続くという認識でいい？
そうですね。ここはその認識で合っています。
while文の中で、switch文を使って処理を分岐させているので処理を終わらせるためのフラグとしてisFinishedを使っています。

⑥// 残高照会  //Q.メソッドにしないでselectMenuメソッドのcase3の中にSystem.out.println("残高は " + this.balance + " 円です");表記ではダメなの？
それでも良いですが、ここでも拡張性や読みやすさ、コードの書き方の統一性などを考えるとメソッドとして切り出しておく方が良いです。
残高照会処理は出力するだけの処理ですが、他の処理は数行に及ぶ処理があります。
ここだけ、case文の中に書いてしまうと統一性が悪くなってしまうので分けてあります。
これに限らず少し冗長的とも取れる書き方ややたら長い変数名、メソッド名になっていても読みやすさの方を意識してコーディングをしてみると良いです。
これをリーダブルコードといいます。
調べると、読みやすいコード・読みにくいコードなど実例と共に出てくるので興味があれば調べてみてください。

⑦int amount = -1;  //Q.なぜ-1とする必要があるのか？
初期値というのは、凡例として正常処理出来ないものを与えておきます。
というのも正常値を与えておいてしまうと、例えば外部から攻撃をされて不正に預入金を増やそうとしたときにamountがエラー値であれば防げるケースがあるからです。
実例を出せないので、ここら辺は経験的にそういうものなんだという理解でいましょう。

⑧System.out.println(MIN_WITHDRAWAL_AMOUNT + " 円から " + (MAX_WITHDRAWAL_AMOUNT / 10000) + " 万円以内で入力してください");  //Q.問題文には1 円から 200 万円以内で入力してくださいと出力するように書いてある
これも①と同様に恐らく誤植です。
作成チームに連携をして修正をします。
実装が正しいです。（50万円まで）

